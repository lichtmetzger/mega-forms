<?php

/**
 * @link       https://wpali.com
 * @since      1.0.5
 *
 * @package    Mega_Forms
 * @subpackage Mega_Forms/admin
 */

/**
 * The admin-specific functionality of the plugin.
 *
 * @package    Mega_Forms
 * @subpackage Mega_Forms/admin
 * @author     Ali Khallad <ali@wpali.com>
 */

if (!defined('ABSPATH')) {
	exit; // Exit if accessed directly
}

class Mega_Forms_Admin
{

	private $plugin_name;
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.0
	 */
	public function __construct($plugin_name, $version)
	{

		$this->plugin_name = $plugin_name;
		$this->version = $version;
		$this->load_dependencies();
	}

	/**
	 * Load the required dependencies for this class.
	 *
	 * @since    1.0.0
	 */
	private function load_dependencies()
	{
		// Since All ajax requests are run from admin side, we'll include public and admin classes from here.
		require_once MEGAFORMS_COMMON_PATH . 'partials/abstracts/class-mega-forms-ajax-exception.php';
		require_once MEGAFORMS_COMMON_PATH . 'partials/class-mega-forms-ajax.php';
		require_once MEGAFORMS_ADMIN_PATH . 'partials/class-mega-forms-admin-ajax.php';
		require_once MEGAFORMS_PUBLIC_PATH . 'partials/class-mega-forms-public-ajax.php';

		// Load the classes responsible for rendering header and footer area of Mega Forms
		require_once MEGAFORMS_ADMIN_PATH . 'partials/views/mega-forms-header-render.php';
		require_once MEGAFORMS_ADMIN_PATH . 'partials/views/mega-forms-body-render.php';
		require_once MEGAFORMS_ADMIN_PATH . 'partials/views/mega-forms-footer-render.php';
	}
	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @since    1.0.0
	 */
	public function enqueue_styles($hook)
	{

		// Load associated styles only on megaforms view
		$cp = mf_api()->get_page();
		$deps = array();
		if ($cp !== false) {
			# Libraries
			wp_register_style('mf-snackbar', MEGAFORMS_DIR_URL . 'admin/assets/css/deps/snackbar.min.css', array(), $this->version, 'all');
			wp_register_style('mf-select2', MEGAFORMS_DIR_URL . 'admin/assets/css/deps/select2.min.css', array(), $this->version, 'all');

			# Main admin style dependencies
			$deps = array('mf-snackbar');

			// Load color picker CSS on settings page
			if ($cp == 'mf_settings') {
				$deps[] = 'wp-color-picker';
			}
		}
		/**
		 * Enqueue the main CSS file for the admin area.
		 * This file is automatically generated. It is a minified version of the following file:
		 * 
		 * - pro/common/assets/css/*.css
		 * - pro/admin/assets/css/*.css
		 * 
		 * @see Gruntfile.js for more details
		 */
		wp_enqueue_style($this->plugin_name, MEGAFORMS_DIR_URL . 'assets/admin/css/styles.min.css', $deps, $this->version, 'all');
	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @since    1.0.5
	 */
	public function enqueue_scripts($hook)
	{
		# Only load associated scripts on megaforms view
		$cp = mf_api()->get_page();
		if ($cp !== false) {

			$mfVars = array();
			$deps = array('jquery');
			$deps[] = 'wp-hooks';
			$deps[] = 'wp-util';
			$deps[] = 'mf-snackbar';
			# Libraries
			wp_register_script('mf-snackbar', MEGAFORMS_DIR_URL . 'admin/assets/js/deps/snackbar.min.js', array(), $this->version, false);
			wp_register_script('mf-select2', MEGAFORMS_DIR_URL . 'admin/assets/js/deps/select2.min.js', array(), $this->version, false);
			// Enqueue scripts conditionally
			if ($cp == 'mf_form_editor') {

				$deps[] = 'jquery-ui-tabs';
				$deps[] = 'jquery-ui-accordion';
				$deps[] = 'jquery-ui-draggable';
				$deps[] = 'jquery-ui-sortable';

				$mfVars = array(
					'labels' => array(
						'renameForm' => __('Rename Form', 'megaforms'),
						'rename' => __('Rename', 'megaforms'),
						'renameFormEg' => __('E.g., Contact Form', 'megaforms'),
						'embedForm' => __('Display Your Form', 'megaforms'),
					),
					'text' => array(
						'yes' => __('Yes', 'megaforms'),
						'no' => __('No', 'megaforms'),
						'removeRowN' => __('The main row can not be deleted.', 'megaforms'),
						'removeRowY' => __('Do you really want to delete this row?', 'megaforms'),
						'removeActionY' => __('Do you really want to delete this action?', 'megaforms'),
						'removeFieldY' => __('Do you really want to delete this field?', 'megaforms'),
						'removeChoiceN' => __('This field requires at least one choice.', 'megaforms'),
						'removeInputN' => __('This field can\'t be disabled.', 'megaforms'),
						'removeConditionN' => __('The main conditional rule can\'t be removed.', 'megaforms'),
						'removeCustomFieldN' => __('The main custom field inputs can\'t be removed.', 'megaforms'),
						'RenameFormText' => __('Enter a new name for your form, and continue building!', 'megaforms'),
						'formNameError' => __('Form name can\'t be empty!', 'megaforms'),
						'embedFormText' => __('Please use this shortcode to display the form on a page or post.', 'megaforms'),
						'removeContainerY' => __('Do you really want to delete this container?', 'megaforms'),
					),
					'spinner' => MEGAFORMS_DIR_URL . 'admin/assets/images/spinner.gif',
				);
			} elseif ($cp == 'mf_entry_view' || $cp == 'mf_entry_editor') {

				$deps[] = 'jquery-ui-accordion';

				$mfVars = array(
					'text' => array(
						'yes' => __('Yes', 'megaforms'),
						'no' => __('No', 'megaforms'),
						'delete' => __('Delete', 'megaforms'),
						'deleteNoticeY' => __('Do you really want to delete this note?', 'megaforms'),
						'addNoteN' => __('You can\'t add an empty note!', 'megaforms'),
					),
				);
			} else {
				$mfVars = array(
					'labels' => array(
						'yes' 		     => __('Yes', 'megaforms'),
						'save' 		     => __('Save', 'megaforms'),
						'create' 		     => __('Type a Title', 'megaforms'),
						'formName'       => __('E.g., My Form', 'megaforms'),
						'formNameError'  => __('Please enter a name for your form, or select a template from the list below!', 'megaforms'),
						'changeColumns'  => __('Change columns visibility', 'megaforms'),
						'changeColumnsDesc'  => __('Enable columns that you wish to display in the entries table.', 'megaforms'),
						'uninstallY'  => __('Are you sure you want to permanently delete all data upon uninstallation.', 'megaforms'),
						'deleteEntriesY'  => __('Are you sure you want to permanently delete all entries for the selected form(s).', 'megaforms'),
						'selectFile'  => __('Select a file to import.', 'megaforms'),
						'selectJsonFile'  => __('Please make sure the selected file is in JSON format.', 'megaforms'),
						'selectExportForm'  => __('Please select the form(s) you want to export.', 'megaforms'),
						'selectExportEntriesForm'  => __('Please select a form.', 'megaforms'),
						'selectExportEntriesFields'  => __('Please select the fields that you want to export.', 'megaforms'),
					),
					'spinner' => MEGAFORMS_DIR_URL . 'admin/assets/images/spinner.gif',
				);

				// Additionally load color picker js on settings page
				if ($cp == 'mf_settings') {
					$deps[] = 'wp-color-picker';
				}
			}

			// Add current page slug to JS vars
			$mfVars['context'] = $cp;

			/**
			 * Register and enqueue the main JS file for the admin area.
			 * This file is automatically generated. It is a minified version of the following file:
			 * 
			 * - common/assets/js/*.js
			 * - admin/assets/js/*.js
			 * 
			 * @see Gruntfile.js for more details
			 */
			wp_register_script('mega-forms-admin', MEGAFORMS_DIR_URL . 'assets/admin/js/scripts.min.js', $deps, $this->version, false);
			wp_localize_script('mega-forms-admin', 'mfCommonVars', get_mf_common_js_vars());
			wp_localize_script('mega-forms-admin', 'mfVars', $mfVars);
			wp_enqueue_script('mega-forms-admin');
		}
	}

	/**
	 * Register the settings page for the admin area.
	 *
	 * @since    1.0.7
	 */
	public function settings_pages()
	{
		// Top level menu page
		$admin_icon = mf_api()->get_mf_icon('#ffffff', true);
		$title = apply_filters('mf_admin_page_menu_title', __('Mega Forms', 'megaforms'));
		add_menu_page(
			$title,
			$title,
			'manage_options',
			'mega-forms',
			array($this, 'megaforms_admin_page'),
			$admin_icon,
			20
		);

		add_submenu_page(
			'mega-forms',
			__('Entries', 'megaforms'),
			__('Entries', 'megaforms'),
			'manage_options',
			'mega-forms-entries',
			array($this, 'megaforms_admin_page')
		);

		add_submenu_page(
			'mega-forms',
			__('Settings', 'megaforms'),
			__('Settings', 'megaforms'),
			'manage_options',
			'mega-forms-settings',
			array($this, 'megaforms_admin_page')
		);

		add_submenu_page(
			'mega-forms',
			__('Import / Export', 'megaforms'),
			__('Import / Export', 'megaforms'),
			'manage_options',
			'mega-forms-import-export',
			array($this, 'megaforms_admin_page')
		);

		add_submenu_page(
			'mega-forms',
			__('Support', 'megaforms'),
			__('Support', 'megaforms'),
			'manage_options',
			'mega-forms-help',
			array($this, 'megaforms_admin_page')
		);
	}

	/**
	 * Settings page callback.
	 *
	 * @since    1.0.0
	 */
	public function megaforms_admin_page()
	{
?>
		<div id="mega-forms">
			<?php
			new MegaForms_Header_Render();
			new MegaForms_Body_Render();
			new MegaForms_Footer_Render();
			?>
		</div>
<?php
	}
	/**
	 * Add css class for every megafroms page
	 *
	 * @since    1.0.2
	 */
	public function body_classes($classes)
	{

		$current_page = mf_api()->get_page();
		if ($current_page !== false) {
			$classes .= ' mf_admin_page';
			$classes .= ' ' . $current_page;

			if ($current_page == 'mf_form_editor' || $current_page == 'mf_entry_view' || $current_page == 'mf_entry_editor') {
				$classes .= ' folded';
			}
		}

		return $classes;
	}
	/**
	 * Handle action that fires in admin header for Mega Forms ( generating donwloads...etc )
	 *
	 * @since    1.0.0
	 */
	public function header_actions()
	{
		$current_page = mf_api()->get_page();
		if ($current_page !== false) {

			# Handle exports
			if ($current_page == 'mf_import_export') {
				if (
					isset($_POST['export_mf_forms']) &&
					isset($_POST['mf_export_list']) &&
					!empty($_POST['mf_export_list'])
				) {
					mf_api()->export_forms($_POST['mf_export_list']);
				} elseif (
					isset($_POST['export_mf_entries']) &&
					isset($_POST['mf_export_entries_form']) &&
					!empty($_POST['mf_export_entries_form']) &&
					isset($_POST['mf_export_entries_fields']) &&
					!empty($_POST['mf_export_entries_fields'])
				) {
					mf_api()->export_forms($_POST['mf_export_entries_form'], 'entries', $_POST['mf_export_entries_fields']);
				}
			}
		}
	}
}
