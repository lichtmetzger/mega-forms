<?php

/**
 * @link       https://wpali.com
 * @since      1.0.6
 *
 */

/**
 * The admin-specific functionality of the pro plugin.
 *
 * @author     ALI KHALLAD <ali@wpali.com>
 */

if (!defined('ABSPATH')) {
	exit; // Exit if accessed directly
}

class Mega_Forms_Admin_Pro
{

	private $plugin_name;
	private $version;

	/**
	 * Initialize the class and set its properties.
	 *
	 * @since    1.0.6
	 */
	public function __construct($plugin_name, $version)
	{
		$this->plugin_name = $plugin_name;
		$this->version = $version;
	}

	/**
	 * Register the stylesheets for the admin area.
	 *
	 * @since    1.0.6
	 */
	public function enqueue_styles($hook)
	{

		# Only load associated styles on megaforms view
		$cp = mf_api()->get_page();
		if ($cp !== false) {
			/**
			 * Enqueue the main CSS file for the admin area (Pro).
			 * This file is automatically generated. It is a minified version of the following file:
			 * 
			 * - pro/common/assets/css/*.css
			 * - pro/admin/assets/css/*.css
			 * 
			 * @see Gruntfile.js for more details
			 */
			wp_enqueue_style($this->plugin_name, MEGAFORMS_DIR_URL . 'assets/pro/admin/css/styles.min.css', array(), $this->version, 'all');
		}
	}

	/**
	 * Register the JavaScript for the admin area.
	 *
	 * @since    1.0.6
	 */
	public function enqueue_scripts($hook)
	{
		# Only load associated scripts on megaforms view
		$cp = mf_api()->get_page();
		if ($cp !== false) {

			/**
			 * Register and enqueue the main JS file for the admin area (Pro).
			 * This file is automatically generated. It is a minified version of the following file:
			 * 
			 * - pro/common/assets/js/*.js
			 * - pro/admin/assets/js/*.js
			 * 
			 * @see Gruntfile.js for more details
			 */
			
			wp_register_script('mega-forms-admin-pro', MEGAFORMS_DIR_URL . 'assets/pro/admin/js/scripts.min.js', array(), $this->version, false);
			wp_enqueue_script('mega-forms-admin-pro');
		}
	}
	/**
	 * Add any extra options to the plugin settings page.
	 *
	 * @since    1.0.6
	 */
	public function forms_settings($options)
	{

		if (isset($options['general'])) {
			$options['general']['enable_ajax'] = array(
				'priority' => 30,
				'type' => 'switch',
				'label' => __('Enable AJAX', 'megaforms'),
				'desc' => __('Switch this on to enable form submission without page refresh.', 'megaforms'),
				'value' => mfget_option('enable_ajax', true),
				'sanitization' => 'boolean',
			);
		}

		return $options;
	}
	/**
	 * Add any extra options to the single form settings area.
	 *
	 * @since    1.0.8
	 */
	public function form_settings($options, $settings)
	{

		if (isset($options['general'])) {
			$options['general']['enable_save_and_continue'] = array(
				'priority' => 50,
				'type' => 'switch',
				'label' => __('Save and Continue', 'megaforms'),
				'desc' => __('Switch this on to allow the user to save the form and continue with the submission later.', 'megaforms'),
				'value' => mfget('enable_save_and_continue', $settings, false),
				'sanitization' => 'boolean',
			);

			$options['general']['save_and_continue_text'] = array(
				'priority' => 60,
				'type' => 'text',
				'label' => __('Save and Continue Text', 'megaforms'),
				'desc' => __('The text for save and continue button.', 'megaforms'),
				'value' => mfget('save_and_continue_text', $settings, __('Save and Continue Later', 'megaforms')),
				'parent' => 'enable_save_and_continue',
				'parent_value' => '1',
				'sanitization' => 'string',
			);
		}

		return $options;
	}

	/**
	 * Handle AJAX file upload.
	 *
	 * @since    1.0.7
	 */
	public function ajax_file_handler()
	{
		$result = array(
			'success' => false,
			'message' => __('Validation failed.', 'megaforms'),
		);

		$form_id = absint(mfpost('_mf_form_id'));
		$referrer = mfget_cleaned_url(mfpost('_mf_referrer'));
		$submitNonce = mfpost('_mf_nonce');
		$sessionNonce = mf_session()->get(get_mf_session_token_id($form_id, $referrer));
		$verify_wp_nonce = wp_verify_nonce(mfpost('_mf_extra_nonce'), $sessionNonce);

		$result_updated = false;
		if ($form_id > 0 && $submitNonce == $sessionNonce && $verify_wp_nonce !== false) {
			$action = mfpost('type');
			if ('upload' == $action) {
				$field_id = absint(mfpost('_mf_field_id'));
				$file = $_FILES['file'] ?? array();
				if ($field_id > 0 && !empty($file)) {
					$form_fields = mf_api()->get_form_meta($form_id, 'fields');
					$field = mfget($field_id, $form_fields);
					if (!empty($field) && 'file' == $field['type']) {
						$fieldObj = MF_Fields::get('file', array('field' => $field));
						$response = $fieldObj->validate_and_upload_file($file);
						if ($response === true) {
							$result = array(
								'success' => true,
								// Get the first result since we are uploading only a single file
								'data' => $fieldObj->uploads[0],
							);
							$result_updated = true;
						} else {
							$result['message'] = $response;
							$result_updated = true;
						}
					}
				}
			} else if ('delete' == $action) {
				$hash = mfpost('hash');
				if ($hash) {
					$delete = mf_files()->delete_temp_file($form_id, $hash);
					if ($delete) {
						$result = array(
							'success' => true,
							'message' => __('File deleted succesfully.', 'megaforms'),
						);
						$result_updated = true;
					} else {
						$result['message'] = __('File deletion failed.', 'megaforms');
						$result_updated = true;
					}
				}
			}

			if (!$result_updated) {
				$result['message'] = __('Request failed.', 'megaforms');
			}
		}
		// Convert the response to json format and send final result.
		echo json_encode($result);
		wp_die();
	}
}
